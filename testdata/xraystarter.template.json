Resources:
  xraystartertsServiceRoleC0FF6DBA:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: xraystarter/xraystarter-ts/ServiceRole/Resource
  xraystartertsServiceRoleDefaultPolicyDADE32E1:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - xray:PutTelemetryRecords
              - xray:PutTraceSegments
            Effect: Allow
            Resource: "*"
          - Action:
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - incoming0B397865
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - incoming0B397865
                        - Arn
                    - /*
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:ConditionCheckItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - items07D08F4B
                  - Arn
              - Ref: AWS::NoValue
        Version: "2012-10-17"
      PolicyName: xraystartertsServiceRoleDefaultPolicyDADE32E1
      Roles:
        - Ref: xraystartertsServiceRoleC0FF6DBA
    Metadata:
      aws:cdk:path: xraystarter/xraystarter-ts/ServiceRole/DefaultPolicy/Resource
  xraystartertsFCA60B54:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: b7774acce472a48fa01e472fd3142681918e298dfa3a76e1643f7df5d710c8b4.zip
      Role:
        Fn::GetAtt:
          - xraystartertsServiceRoleC0FF6DBA
          - Arn
      Architectures:
        - x86_64
      Description: xraystarter-ts
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          Bucket:
            Ref: incoming0B397865
          TableName:
            Ref: items07D08F4B
      FunctionName: xraystarter-ts
      Handler: index.lambdaHandler
      MemorySize: 1024
      Runtime: nodejs16.x
      Timeout: 3
      TracingConfig:
        Mode: Active
    DependsOn:
      - xraystartertsServiceRoleDefaultPolicyDADE32E1
      - xraystartertsServiceRoleC0FF6DBA
    Metadata:
      aws:cdk:path: xraystarter/xraystarter-ts/Resource
      aws:asset:path: asset.b7774acce472a48fa01e472fd3142681918e298dfa3a76e1643f7df5d710c8b4
      aws:asset:is-bundled: true
      aws:asset:property: Code
  xraystartertsLogRetention13C9F077:
    Type: Custom::LogRetention
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A
          - Arn
      LogGroupName:
        Fn::Join:
          - ""
          - - /aws/lambda/
            - Ref: xraystartertsFCA60B54
      RetentionInDays: 30
    Metadata:
      aws:cdk:path: xraystarter/xraystarter-ts/LogRetention/Resource
  xraystartertsAllowInvokexraystarters3eventTopic3F46A65A338AC70A:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - xraystartertsFCA60B54
          - Arn
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: s3eventTopicB05B6E9B
    Metadata:
      aws:cdk:path: xraystarter/xraystarter-ts/AllowInvoke:xraystarters3eventTopic3F46A65A
  xraystartertss3eventTopic394C8AA2:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn:
        Ref: s3eventTopicB05B6E9B
      Endpoint:
        Fn::GetAtt:
          - xraystartertsFCA60B54
          - Arn
    Metadata:
      aws:cdk:path: xraystarter/xraystarter-ts/s3eventTopic/Resource
  LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: xraystarter/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/Resource
  LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:DeleteRetentionPolicy
              - logs:PutRetentionPolicy
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB
      Roles:
        - Ref: LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB
    Metadata:
      aws:cdk:path: xraystarter/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/DefaultPolicy/Resource
  LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs14.x
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: eb5b005c858404ea0c8f68098ed5dcdf5340e02461f149751d10f59c210d5ef8.zip
      Role:
        Fn::GetAtt:
          - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB
          - Arn
    DependsOn:
      - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB
      - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB
    Metadata:
      aws:cdk:path: xraystarter/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/Resource
      aws:asset:path: asset.eb5b005c858404ea0c8f68098ed5dcdf5340e02461f149751d10f59c210d5ef8
      aws:asset:is-bundled: false
      aws:asset:property: Code
  xraystarterpyServiceRoleD837C153:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: xraystarter/xraystarter-py/ServiceRole/Resource
  xraystarterpyServiceRoleDefaultPolicyA91A13F5:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - xray:PutTelemetryRecords
              - xray:PutTraceSegments
            Effect: Allow
            Resource: "*"
          - Action:
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - incoming0B397865
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - incoming0B397865
                        - Arn
                    - /*
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:ConditionCheckItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - items07D08F4B
                  - Arn
              - Ref: AWS::NoValue
        Version: "2012-10-17"
      PolicyName: xraystarterpyServiceRoleDefaultPolicyA91A13F5
      Roles:
        - Ref: xraystarterpyServiceRoleD837C153
    Metadata:
      aws:cdk:path: xraystarter/xraystarter-py/ServiceRole/DefaultPolicy/Resource
  xraystarterpy57F97FB4:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: b37b47a5c686d773053c59ea93fac3a9e9cc3a908112ecf0425e117f33392d4f.zip
      Role:
        Fn::GetAtt:
          - xraystarterpyServiceRoleD837C153
          - Arn
      Description: xraystarter-py
      Environment:
        Variables:
          Bucket:
            Ref: incoming0B397865
          TableName:
            Ref: items07D08F4B
      FunctionName: xraystarter-py
      Handler: app.lambda_handler
      MemorySize: 1024
      Runtime: python3.8
      Timeout: 3
      TracingConfig:
        Mode: Active
    DependsOn:
      - xraystarterpyServiceRoleDefaultPolicyA91A13F5
      - xraystarterpyServiceRoleD837C153
    Metadata:
      aws:cdk:path: xraystarter/xraystarter-py/Resource
      aws:asset:path: asset.b37b47a5c686d773053c59ea93fac3a9e9cc3a908112ecf0425e117f33392d4f
      aws:asset:is-bundled: true
      aws:asset:property: Code
  xraystarterpyLogRetention14B2F520:
    Type: Custom::LogRetention
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A
          - Arn
      LogGroupName:
        Fn::Join:
          - ""
          - - /aws/lambda/
            - Ref: xraystarterpy57F97FB4
      RetentionInDays: 30
    Metadata:
      aws:cdk:path: xraystarter/xraystarter-py/LogRetention/Resource
  xraystarterpyAllowInvokexraystarters3eventTopic3F46A65ACD6F2D8A:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - xraystarterpy57F97FB4
          - Arn
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: s3eventTopicB05B6E9B
    Metadata:
      aws:cdk:path: xraystarter/xraystarter-py/AllowInvoke:xraystarters3eventTopic3F46A65A
  xraystarterpys3eventTopic05A7FB78:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn:
        Ref: s3eventTopicB05B6E9B
      Endpoint:
        Fn::GetAtt:
          - xraystarterpy57F97FB4
          - Arn
    Metadata:
      aws:cdk:path: xraystarter/xraystarter-py/s3eventTopic/Resource
  xraystartergoServiceRoleC3D34D3A:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: xraystarter/xraystarter-go/ServiceRole/Resource
  xraystartergoServiceRoleDefaultPolicy425C9AB6:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - xray:PutTelemetryRecords
              - xray:PutTraceSegments
            Effect: Allow
            Resource: "*"
          - Action:
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - incoming0B397865
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - incoming0B397865
                        - Arn
                    - /*
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:ConditionCheckItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - items07D08F4B
                  - Arn
              - Ref: AWS::NoValue
        Version: "2012-10-17"
      PolicyName: xraystartergoServiceRoleDefaultPolicy425C9AB6
      Roles:
        - Ref: xraystartergoServiceRoleC3D34D3A
    Metadata:
      aws:cdk:path: xraystarter/xraystarter-go/ServiceRole/DefaultPolicy/Resource
  xraystartergo92905A8C:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 08151930bf76dc329ce029062491cf8d404f9c6c9ba6bf458469b0fb6e99ed97.zip
      Role:
        Fn::GetAtt:
          - xraystartergoServiceRoleC3D34D3A
          - Arn
      Description: xraystarter-go
      Environment:
        Variables:
          Bucket:
            Ref: incoming0B397865
          TableName:
            Ref: items07D08F4B
      FunctionName: xraystarter-go
      Handler: main
      MemorySize: 1024
      Runtime: go1.x
      Timeout: 3
      TracingConfig:
        Mode: Active
    DependsOn:
      - xraystartergoServiceRoleDefaultPolicy425C9AB6
      - xraystartergoServiceRoleC3D34D3A
    Metadata:
      aws:cdk:path: xraystarter/xraystarter-go/Resource
      aws:asset:path: asset.08151930bf76dc329ce029062491cf8d404f9c6c9ba6bf458469b0fb6e99ed97.zip
      aws:asset:is-bundled: false
      aws:asset:property: Code
  xraystartergoLogRetention2C2BC01C:
    Type: Custom::LogRetention
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A
          - Arn
      LogGroupName:
        Fn::Join:
          - ""
          - - /aws/lambda/
            - Ref: xraystartergo92905A8C
      RetentionInDays: 30
    Metadata:
      aws:cdk:path: xraystarter/xraystarter-go/LogRetention/Resource
  xraystartergoAllowInvokexraystarters3eventTopic3F46A65ABA4DC372:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - xraystartergo92905A8C
          - Arn
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: s3eventTopicB05B6E9B
    Metadata:
      aws:cdk:path: xraystarter/xraystarter-go/AllowInvoke:xraystarters3eventTopic3F46A65A
  xraystartergos3eventTopic0C8E78B8:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn:
        Ref: s3eventTopicB05B6E9B
      Endpoint:
        Fn::GetAtt:
          - xraystartergo92905A8C
          - Arn
    Metadata:
      aws:cdk:path: xraystarter/xraystarter-go/s3eventTopic/Resource
  incoming0B397865:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: xraystarter/incoming/Resource
  incomingNotificationsC0478269:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691
          - Arn
      BucketName:
        Ref: incoming0B397865
      NotificationConfiguration:
        TopicConfigurations:
          - Events:
              - s3:ObjectCreated:*
            TopicArn:
              Ref: s3eventTopicB05B6E9B
      Managed: true
    DependsOn:
      - s3eventTopicPolicyC471AF1E
      - s3eventTopicB05B6E9B
    Metadata:
      aws:cdk:path: xraystarter/incoming/Notifications/Resource
  s3eventTopicB05B6E9B:
    Type: AWS::SNS::Topic
    Metadata:
      aws:cdk:path: xraystarter/s3eventTopic/Resource
  s3eventTopicPolicyC471AF1E:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sns:Publish
            Condition:
              ArnLike:
                aws:SourceArn:
                  Fn::GetAtt:
                    - incoming0B397865
                    - Arn
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Resource:
              Ref: s3eventTopicB05B6E9B
            Sid: "0"
        Version: "2012-10-17"
      Topics:
        - Ref: s3eventTopicB05B6E9B
    Metadata:
      aws:cdk:path: xraystarter/s3eventTopic/Policy/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: xraystarter/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:PutBucketNotification
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      Roles:
        - Ref: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: xraystarter/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691:
    Type: AWS::Lambda::Function
    Properties:
      Description: AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)
      Code:
        ZipFile: |
          import boto3  # type: ignore
          import json
          import logging
          import urllib.request

          s3 = boto3.client("s3")

          EVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'

          CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

          def handler(event: dict, context):
            response_status = "SUCCESS"
            error_message = ""
            try:
              props = event["ResourceProperties"]
              bucket = props["BucketName"]
              notification_configuration = props["NotificationConfiguration"]
              request_type = event["RequestType"]
              managed = props.get('Managed', 'true').lower() == 'true'
              stack_id = event['StackId']

              if managed:
                config = handle_managed(request_type, notification_configuration)
              else:
                config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)

              put_bucket_notification_configuration(bucket, config)
            except Exception as e:
              logging.exception("Failed to put bucket notification configuration")
              response_status = "FAILED"
              error_message = f"Error: {str(e)}. "
            finally:
              submit_response(event, context, response_status, error_message)

          def handle_managed(request_type, notification_configuration):
            if request_type == 'Delete':
              return {}
            return notification_configuration

          def handle_unmanaged(bucket, stack_id, request_type, notification_configuration):
            external_notifications = find_external_notifications(bucket, stack_id)

            if request_type == 'Delete':
              return external_notifications

            def with_id(notification):
              notification['Id'] = f"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}"
              return notification

            notifications = {}
            for t in CONFIGURATION_TYPES:
              external = external_notifications.get(t, [])
              incoming = [with_id(n) for n in notification_configuration.get(t, [])]
              notifications[t] = external + incoming

            if EVENTBRIDGE_CONFIGURATION in notification_configuration:
              notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]
            elif EVENTBRIDGE_CONFIGURATION in external_notifications:
              notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]

            return notifications

          def find_external_notifications(bucket, stack_id):
            existing_notifications = get_bucket_notification_configuration(bucket)
            external_notifications = {}
            for t in CONFIGURATION_TYPES:
              external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f"{stack_id}-")]

            if EVENTBRIDGE_CONFIGURATION in existing_notifications:
              external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]

            return external_notifications

          def get_bucket_notification_configuration(bucket):
            return s3.get_bucket_notification_configuration(Bucket=bucket)

          def put_bucket_notification_configuration(bucket, notification_configuration):
            s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)

          def submit_response(event: dict, context, response_status: str, error_message: str):
            response_body = json.dumps(
              {
                "Status": response_status,
                "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
                "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
                "StackId": event["StackId"],
                "RequestId": event["RequestId"],
                "LogicalResourceId": event["LogicalResourceId"],
                "NoEcho": False,
              }
            ).encode("utf-8")
            headers = {"content-type": "", "content-length": str(len(response_body))}
            try:
              req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
              with urllib.request.urlopen(req) as response:
                print(response.read().decode("utf-8"))
              print("Status code: " + response.reason)
            except Exception as e:
                print("send(..) failed executing request.urlopen(..): " + str(e))
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
          - Arn
      Runtime: python3.7
      Timeout: 300
    DependsOn:
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: xraystarter/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource
  items07D08F4B:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: itemID
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: itemID
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      TableName: items
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: xraystarter/items/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/1VRyW7DIBD9Ft/xxE4Uqcc2kXqq2sjN3cJAHbyA5YFWFvK/lyVLe+EtGph5wxb2Bbgioz+YM97ng2zAfRrKeuKt2g10bDitleaiQ3iP8GoVM1IrIukIrtKDIMcvFfGkB8mWIBNbCe5qiigMwksAr8EdLOuFOVAUJNFwIbGVpI7gvHVvFN4T8ygRg7rZvla3CG+6rYQRKlaiQj+/bZDNcrrd/afPepIsuInE8zH2H7kSvig6au43cqZNShnJupIYxu+plaqN6QVqOzNB7sSbH9ZMNoY7asVlmrnI6TBdKBTZ83Xpm4Apdj4t5qLVteQUxSNu+AXocPNdPkG5hTLrUMp8tj76KKBK+AsrO6tK0gEAAA==
    Metadata:
      aws:cdk:path: xraystarter/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Outputs:
  LambdaNameTS:
    Value:
      Ref: xraystartertsFCA60B54
    Export:
      Name: xraystarter-ts-name
  LambdaNamePy:
    Value:
      Ref: xraystarterpy57F97FB4
    Export:
      Name: xraystarter-py-name
  LambdaNameGo:
    Value:
      Ref: xraystartergo92905A8C
    Export:
      Name: xraystarter-GO-name
  BucketName:
    Value:
      Ref: incoming0B397865
  TableName:
    Value:
      Ref: items07D08F4B
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

